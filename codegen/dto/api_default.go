// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * backend service
 *
 * Сервис для управления ПВЗ и приемкой товаров
 *
 * API version: 1.0.0
 */

package dto

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) *DefaultAPIController {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"DummyLoginPost": Route{
			strings.ToUpper("Post"),
			"/dummyLogin",
			c.DummyLoginPost,
		},
		"RegisterPost": Route{
			strings.ToUpper("Post"),
			"/register",
			c.RegisterPost,
		},
		"LoginPost": Route{
			strings.ToUpper("Post"),
			"/login",
			c.LoginPost,
		},
		"PvzGet": Route{
			strings.ToUpper("Get"),
			"/pvz",
			c.PvzGet,
		},
		"PvzPost": Route{
			strings.ToUpper("Post"),
			"/pvz",
			c.PvzPost,
		},
		"PvzPvzIdCloseLastReceptionPost": Route{
			strings.ToUpper("Post"),
			"/pvz/{pvzId}/close_last_reception",
			c.PvzPvzIdCloseLastReceptionPost,
		},
		"PvzPvzIdDeleteLastProductPost": Route{
			strings.ToUpper("Post"),
			"/pvz/{pvzId}/delete_last_product",
			c.PvzPvzIdDeleteLastProductPost,
		},
		"ReceptionsPost": Route{
			strings.ToUpper("Post"),
			"/receptions",
			c.ReceptionsPost,
		},
		"ProductsPost": Route{
			strings.ToUpper("Post"),
			"/products",
			c.ProductsPost,
		},
	}
}

// DummyLoginPost - Получение тестового токена
func (c *DefaultAPIController) DummyLoginPost(w http.ResponseWriter, r *http.Request) {
	var dummyLoginPostRequestParam DummyLoginPostRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dummyLoginPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDummyLoginPostRequestRequired(dummyLoginPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDummyLoginPostRequestConstraints(dummyLoginPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DummyLoginPost(r.Context(), dummyLoginPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RegisterPost - Регистрация пользователя
func (c *DefaultAPIController) RegisterPost(w http.ResponseWriter, r *http.Request) {
	var registerPostRequestParam RegisterPostRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&registerPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRegisterPostRequestRequired(registerPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRegisterPostRequestConstraints(registerPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RegisterPost(r.Context(), registerPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// LoginPost - Авторизация пользователя
func (c *DefaultAPIController) LoginPost(w http.ResponseWriter, r *http.Request) {
	var loginPostRequestParam LoginPostRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&loginPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginPostRequestRequired(loginPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoginPostRequestConstraints(loginPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.LoginPost(r.Context(), loginPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PvzGet - Получение списка ПВЗ с фильтрацией по дате приемки и пагинацией
func (c *DefaultAPIController) PvzGet(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startDateParam time.Time
	if query.Has("startDate"){
		param, err := parseTime(query.Get("startDate"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "startDate", Err: err}, nil)
			return
		}

		startDateParam = param
	} else {
	}
	var endDateParam time.Time
	if query.Has("endDate"){
		param, err := parseTime(query.Get("endDate"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "endDate", Err: err}, nil)
			return
		}

		endDateParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](30),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 10
		limitParam = param
	}
	result, err := c.service.PvzGet(r.Context(), startDateParam, endDateParam, pageParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PvzPost - Создание ПВЗ (только для модераторов)
func (c *DefaultAPIController) PvzPost(w http.ResponseWriter, r *http.Request) {
	var pvzParam Pvz
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&pvzParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPvzRequired(pvzParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPvzConstraints(pvzParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PvzPost(r.Context(), pvzParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PvzPvzIdCloseLastReceptionPost - Закрытие последней открытой приемки товаров в рамках ПВЗ
func (c *DefaultAPIController) PvzPvzIdCloseLastReceptionPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pvzIdParam := params["pvzId"]
	if pvzIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pvzId"}, nil)
		return
	}
	result, err := c.service.PvzPvzIdCloseLastReceptionPost(r.Context(), pvzIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PvzPvzIdDeleteLastProductPost - Удаление последнего добавленного товара из текущей приемки (LIFO, только для сотрудников ПВЗ)
func (c *DefaultAPIController) PvzPvzIdDeleteLastProductPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pvzIdParam := params["pvzId"]
	if pvzIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pvzId"}, nil)
		return
	}
	result, err := c.service.PvzPvzIdDeleteLastProductPost(r.Context(), pvzIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReceptionsPost - Создание новой приемки товаров (только для сотрудников ПВЗ)
func (c *DefaultAPIController) ReceptionsPost(w http.ResponseWriter, r *http.Request) {
	var receptionsPostRequestParam ReceptionsPostRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&receptionsPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReceptionsPostRequestRequired(receptionsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertReceptionsPostRequestConstraints(receptionsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ReceptionsPost(r.Context(), receptionsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProductsPost - Добавление товара в текущую приемку (только для сотрудников ПВЗ)
func (c *DefaultAPIController) ProductsPost(w http.ResponseWriter, r *http.Request) {
	var productsPostRequestParam ProductsPostRequest
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&productsPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProductsPostRequestRequired(productsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProductsPostRequestConstraints(productsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProductsPost(r.Context(), productsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
